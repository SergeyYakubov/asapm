type BeamtimeUser {
    applicant: String
    email: String
    institute: String
    lastname: String
    userId: String
    username: String
}

input InputBeamtimeUser {
    applicant: String
    email: String
    institute: String
    lastname: String
    userId: String
    username: String
}

type OnlineAnylysisMeta {
    asapoBeamtimeTokenPath: String
    reservedNodes: [String!]
    slurmReservation: String
    slurmPartition: String
    sshPrivateKeyPath: String
    sshPublicKeyPath: String
    userAccount: String
}

input InputOnlineAnylysisMeta {
    asapoBeamtimeTokenPath: String
    reservedNodes: [String!]
    slurmReservation: String
    slurmPartition: String
    sshPrivateKeyPath: String
    sshPublicKeyPath: String
    userAccount: String
}


scalar DateTime

type Users {
    doorDb: [String!]
    special: [String!]
    unknown: [String!]
}

input InputUsers {
    doorDb: [String!]
    special: [String!]
    unknown: [String!]
}

interface CollectionEntryInterface {
    id: String!
    eventStart: DateTime
    eventEnd: DateTime
    title: String
    childCollectionName: String
    childCollection: [BaseCollectionEntry!]
    customValues (selectFields: [String!],removeFields: [String!]): Map
    type: String!
    parentBeamtimeMeta: ParentBeamtimeMeta!
    jsonString: String
}

type CollectionEntry implements CollectionEntryInterface {
    id: String!
    eventStart: DateTime
    eventEnd: DateTime
    title: String
    childCollectionName: String
    childCollection: [BaseCollectionEntry!]
    customValues (selectFields: [String!],removeFields: [String!]): Map
    type: String!
    parentBeamtimeMeta: ParentBeamtimeMeta!
    jsonString: String
}

type ParentBeamtimeMeta {
    id: String!
    applicant: BeamtimeUser
    beamline: String
    beamlineAlias: String
    status: String!
    contact: String
    corePath: String
    eventEnd: DateTime
    eventStart: DateTime
    facility: String
    generated: DateTime
    leader: BeamtimeUser
    onlineAnalysis: OnlineAnylysisMeta
    pi: BeamtimeUser
    proposalId: String
    proposalType: String
    title: String
    unixId: String
    users: Users
}

type BeamtimeMeta implements CollectionEntryInterface {
    id: String!
    applicant: BeamtimeUser
    beamline: String
    beamlineAlias: String
    beamlineSetup: String
    status: String!
    contact: String
    corePath: String
    eventEnd: DateTime
    eventStart: DateTime
    facility: String
    generated: DateTime
    leader: BeamtimeUser
    onlineAnalysis: OnlineAnylysisMeta
    pi: BeamtimeUser
    proposalId: String
    proposalType: String
    title: String
    unixId: String
    users: Users
    childCollectionName: String
    childCollection: [BaseCollectionEntry!]
    customValues (selectFields: [String!],removeFields: [String!]): Map
    type: String!
    parentBeamtimeMeta: ParentBeamtimeMeta!
    jsonString: String
}

type BaseCollectionEntry {
    id: String!
    eventStart: DateTime
    eventEnd: DateTime
    title: String
}


input NewCollectionEntry {
    id: String!
    eventStart: DateTime
    eventEnd: DateTime
    title: String
    childCollectionName: String
    customValues: Map
}

input NewBeamtimeMeta {
    applicant: InputBeamtimeUser
    beamline: String
    beamlineAlias: String
    beamlineSetup: String
    id: String!
    status: String!
    contact: String
    corePath: String
    eventEnd: DateTime
    eventStart: DateTime
    facility: String
    generated: DateTime
    leader: InputBeamtimeUser
    onlineAnalysis: InputOnlineAnylysisMeta
    pi: InputBeamtimeUser
    proposalId: String
    proposalType: String
    title: String
    unixId: String
    users: InputUsers
    childCollectionName: String
    customValues: Map
}

input ModifiedBeamtimeMeta {
    id: String!
    status: String
    users: InputUsers
}

input ModifiedUserMeta {
    id: String!
    deleteFields: [String!]
    updateFields: Map
    addFields: Map
}

