directive @needAcl(acl: Acls!) on FIELD_DEFINITION
#directive @inputNeedAcl(acl: Acls!) on INPUT_FIELD_DEFINITION

enum Acls {
    ADMIN
    READ
}


type Mutation {
    createMeta(input: NewBeamtimeMeta!): BeamtimeMeta @needAcl(acl: ADMIN)
    deleteMeta(id: String!): String @needAcl(acl: ADMIN)
    deleteSubcollection(id: String!): String @needAcl(acl: ADMIN)
    addCollectionEntry(input: NewCollectionEntry!): CollectionEntry @needAcl(acl: ADMIN)
    modifyBeamtimeMeta(input: FieldsToSet!): BeamtimeMeta @needAcl(acl: ADMIN)
    updateCollectionEntryFields(input: FieldsToSet!): CollectionEntry
    addCollectionEntryFields(input: FieldsToSet!): CollectionEntry
    deleteCollectionEntryFields(input: FieldsToDelete!): CollectionEntry
    setUserPreferences(id:ID!, input: InputUserPreferences!): UserAccount

    # Logbook API
    addMessageLogEntry(input: NewLogEntryMessage!): ID @needAcl(acl: ADMIN)
    removeLogEntry(id: ID!): ID @needAcl(acl: ADMIN)
}

type Query {
    meta (filter: String, orderBy: String): [BeamtimeMeta!]!
    collections (filter: String, orderBy: String): [CollectionEntry!]!
    uniqueFields  (filter: String, keys: [String!]!): [UniqueField!]!
    user (id: ID!): UserAccount

    # Logbook API
    logEntry (id: ID!): LogEntry
    logEntries (filter: String!, start: Int, limit: Int): LogEntryQueryResult
    logEntriesUniqueFields (filter: String, keys: [String!]!): [UniqueField!]!
}
