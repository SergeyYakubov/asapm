// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CollectionEntryInterface interface {
	IsCollectionEntryInterface()
}

type BaseCollectionEntry struct {
	ID         *string    `json:"_id" bson:"_id"`
	EventStart *time.Time `json:"eventStart" bson:"eventStart"`
	EventEnd   *time.Time `json:"eventEnd" bson:"eventEnd"`
	Title      *string    `json:"title" bson:"title"`
}

type BeamtimeMeta struct {
	ID                  string                 `json:"_id" bson:"_id"`
	Applicant           *BeamtimeUser          `json:"applicant" bson:"applicant"`
	Beamline            *string                `json:"beamline" bson:"beamline"`
	BeamlineAlias       *string                `json:"beamlineAlias" bson:"beamlineAlias"`
	Status              string                 `json:"status" bson:"status"`
	Contact             *string                `json:"contact" bson:"contact"`
	CorePath            *string                `json:"corePath" bson:"corePath"`
	EventEnd            *time.Time             `json:"eventEnd" bson:"eventEnd"`
	EventStart          *time.Time             `json:"eventStart" bson:"eventStart"`
	Facility            *string                `json:"facility" bson:"facility"`
	Generated           *time.Time             `json:"generated" bson:"generated"`
	Leader              *BeamtimeUser          `json:"leader" bson:"leader"`
	OnlineAnalysis      *OnlineAnylysisMeta    `json:"onlineAnalysis" bson:"onlineAnalysis"`
	Pi                  *BeamtimeUser          `json:"pi" bson:"pi"`
	ProposalID          *string                `json:"proposalId" bson:"proposalId"`
	ProposalType        *string                `json:"proposalType" bson:"proposalType"`
	Title               *string                `json:"title" bson:"title"`
	UnixID              *string                `json:"unixId" bson:"unixId"`
	Users               *Users                 `json:"users" bson:"users"`
	ChildCollectionName *string                `json:"childCollectionName" bson:"childCollectionName"`
	ChildCollection     []*BaseCollectionEntry `json:"childCollection" bson:"childCollection"`
	CustomValues        map[string]interface{} `json:"customValues" bson:"customValues"`
	Type                string                 `json:"type" bson:"type"`
	ParentBeamtimeMeta  *ParentBeamtimeMeta    `json:"parentBeamtimeMeta" bson:"parentBeamtimeMeta"`
	JSONString          *string                `json:"jsonString" bson:"jsonString"`
}

func (BeamtimeMeta) IsCollectionEntryInterface() {}

type BeamtimeUser struct {
	Applicant *string `json:"applicant" bson:"applicant"`
	Email     *string `json:"email" bson:"email"`
	Institute *string `json:"institute" bson:"institute"`
	Lastname  *string `json:"lastname" bson:"lastname"`
	UserID    *string `json:"userId" bson:"userId"`
	Username  *string `json:"username" bson:"username"`
}

type CollectionEntry struct {
	ID                  string                 `json:"_id" bson:"_id"`
	EventStart          *time.Time             `json:"eventStart" bson:"eventStart"`
	EventEnd            *time.Time             `json:"eventEnd" bson:"eventEnd"`
	Title               *string                `json:"title" bson:"title"`
	ChildCollectionName *string                `json:"childCollectionName" bson:"childCollectionName"`
	ChildCollection     []*BaseCollectionEntry `json:"childCollection" bson:"childCollection"`
	CustomValues        map[string]interface{} `json:"customValues" bson:"customValues"`
	Type                string                 `json:"type" bson:"type"`
	ParentBeamtimeMeta  *ParentBeamtimeMeta    `json:"parentBeamtimeMeta" bson:"parentBeamtimeMeta"`
	JSONString          *string                `json:"jsonString" bson:"jsonString"`
}

func (CollectionEntry) IsCollectionEntryInterface() {}

type InputBeamtimeUser struct {
	Applicant *string `json:"applicant" bson:"applicant"`
	Email     *string `json:"email" bson:"email"`
	Institute *string `json:"institute" bson:"institute"`
	Lastname  *string `json:"lastname" bson:"lastname"`
	UserID    *string `json:"userId" bson:"userId"`
	Username  *string `json:"username" bson:"username"`
}

type InputOnlineAnylysisMeta struct {
	AsapoBeamtimeTokenPath *string   `json:"asapoBeamtimeTokenPath" bson:"asapoBeamtimeTokenPath"`
	ReservedNodes          []*string `json:"reservedNodes" bson:"reservedNodes"`
	SlurmReservation       *string   `json:"slurmReservation" bson:"slurmReservation"`
	SlurmPartition         *string   `json:"slurmPartition" bson:"slurmPartition"`
	SSHPrivateKeyPath      *string   `json:"sshPrivateKeyPath" bson:"sshPrivateKeyPath"`
	SSHPublicKeyPath       *string   `json:"sshPublicKeyPath" bson:"sshPublicKeyPath"`
	UserAccount            *string   `json:"userAccount" bson:"userAccount"`
}

type InputUserPreferences struct {
	Schema *string `json:"schema" bson:"schema"`
}

type InputUsers struct {
	DoorDb  []*string `json:"doorDb" bson:"doorDb"`
	Special []*string `json:"special" bson:"special"`
	Unknown []*string `json:"unknown" bson:"unknown"`
}

type NewBeamtimeMeta struct {
	Applicant           *InputBeamtimeUser       `json:"applicant" bson:"applicant"`
	Beamline            *string                  `json:"beamline" bson:"beamline"`
	BeamlineAlias       *string                  `json:"beamlineAlias" bson:"beamlineAlias"`
	ID                  string                   `json:"_id" bson:"_id"`
	Status              string                   `json:"status" bson:"status"`
	Contact             *string                  `json:"contact" bson:"contact"`
	CorePath            *string                  `json:"corePath" bson:"corePath"`
	EventEnd            *time.Time               `json:"eventEnd" bson:"eventEnd"`
	EventStart          *time.Time               `json:"eventStart" bson:"eventStart"`
	Facility            *string                  `json:"facility" bson:"facility"`
	Generated           *time.Time               `json:"generated" bson:"generated"`
	Leader              *InputBeamtimeUser       `json:"leader" bson:"leader"`
	OnlineAnalysis      *InputOnlineAnylysisMeta `json:"onlineAnalysis" bson:"onlineAnalysis"`
	Pi                  *InputBeamtimeUser       `json:"pi" bson:"pi"`
	ProposalID          *string                  `json:"proposalId" bson:"proposalId"`
	ProposalType        *string                  `json:"proposalType" bson:"proposalType"`
	Title               *string                  `json:"title" bson:"title"`
	UnixID              *string                  `json:"unixId" bson:"unixId"`
	Users               *InputUsers              `json:"users" bson:"users"`
	ChildCollectionName *string                  `json:"childCollectionName" bson:"childCollectionName"`
	CustomValues        map[string]interface{}   `json:"customValues" bson:"customValues"`
}

type NewCollectionEntry struct {
	ID                  string                 `json:"_id" bson:"_id"`
	EventStart          *time.Time             `json:"eventStart" bson:"eventStart"`
	EventEnd            *time.Time             `json:"eventEnd" bson:"eventEnd"`
	Title               *string                `json:"title" bson:"title"`
	ChildCollectionName *string                `json:"childCollectionName" bson:"childCollectionName"`
	CustomValues        map[string]interface{} `json:"customValues" bson:"customValues"`
}

type OnlineAnylysisMeta struct {
	AsapoBeamtimeTokenPath *string   `json:"asapoBeamtimeTokenPath" bson:"asapoBeamtimeTokenPath"`
	ReservedNodes          []*string `json:"reservedNodes" bson:"reservedNodes"`
	SlurmReservation       *string   `json:"slurmReservation" bson:"slurmReservation"`
	SlurmPartition         *string   `json:"slurmPartition" bson:"slurmPartition"`
	SSHPrivateKeyPath      *string   `json:"sshPrivateKeyPath" bson:"sshPrivateKeyPath"`
	SSHPublicKeyPath       *string   `json:"sshPublicKeyPath" bson:"sshPublicKeyPath"`
	UserAccount            *string   `json:"userAccount" bson:"userAccount"`
}

type ParentBeamtimeMeta struct {
	ID             string              `json:"_id" bson:"_id"`
	Applicant      *BeamtimeUser       `json:"applicant" bson:"applicant"`
	Beamline       *string             `json:"beamline" bson:"beamline"`
	BeamlineAlias  *string             `json:"beamlineAlias" bson:"beamlineAlias"`
	Status         string              `json:"status" bson:"status"`
	Contact        *string             `json:"contact" bson:"contact"`
	CorePath       *string             `json:"corePath" bson:"corePath"`
	EventEnd       *time.Time          `json:"eventEnd" bson:"eventEnd"`
	EventStart     *time.Time          `json:"eventStart" bson:"eventStart"`
	Facility       *string             `json:"facility" bson:"facility"`
	Generated      *time.Time          `json:"generated" bson:"generated"`
	Leader         *BeamtimeUser       `json:"leader" bson:"leader"`
	OnlineAnalysis *OnlineAnylysisMeta `json:"onlineAnalysis" bson:"onlineAnalysis"`
	Pi             *BeamtimeUser       `json:"pi" bson:"pi"`
	ProposalID     *string             `json:"proposalId" bson:"proposalId"`
	ProposalType   *string             `json:"proposalType" bson:"proposalType"`
	Title          *string             `json:"title" bson:"title"`
	UnixID         *string             `json:"unixId" bson:"unixId"`
	Users          *Users              `json:"users" bson:"users"`
}

type UserAccount struct {
	ID          string           `json:"id" bson:"id"`
	Preferences *UserPreferences `json:"preferences" bson:"preferences"`
}

type UserPreferences struct {
	Schema *string `json:"schema" bson:"schema"`
}

type Users struct {
	DoorDb  []*string `json:"doorDb" bson:"doorDb"`
	Special []*string `json:"special" bson:"special"`
	Unknown []*string `json:"unknown" bson:"unknown"`
}

type Acls string

const (
	AclsWrite Acls = "WRITE"
	AclsRead  Acls = "READ"
)

var AllAcls = []Acls{
	AclsWrite,
	AclsRead,
}

func (e Acls) IsValid() bool {
	switch e {
	case AclsWrite, AclsRead:
		return true
	}
	return false
}

func (e Acls) String() string {
	return string(e)
}

func (e *Acls) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Acls(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Acls", str)
	}
	return nil
}

func (e Acls) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
